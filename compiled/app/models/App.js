// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      return this.newgame();
    };

    App.prototype.endgame = function() {
      var dealerScore, getBestScore, playerScore;
      console.log('into endgame');
      getBestScore = function(scoreArray) {
        if (scoreArray[1] && scoreArray[1] <= 21) {
          return scoreArray[1];
        } else {
          return scoreArray[0];
        }
      };
      playerScore = getBestScore(this.get('playerHand').scores());
      dealerScore = getBestScore(this.get('dealerHand').scores());
      console.log("scores: " + playerScore + ", " + dealerScore);
      this.set('winner', (playerScore > 21 ? 'Player Bust! Dealer Won.' : dealerScore > 21 ? 'Dealer Bust! Player Won.' : playerScore > dealerScore && playerScore <= 21 ? 'Player Won!' : playerScore === dealerScore ? 'Push!' : 'Dealer Won!'));
      console.log('results triggered');
      return this.trigger('results', this);
    };

    App.prototype.newgame = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.set('winner', '');
      this.listenTo(this.get('playerHand'), 'stand', ((function(_this) {
        return function() {
          return _this.get('dealerHand').autoplay();
        };
      })(this)));
      this.listenTo(this.get('dealerHand'), 'gameover', ((function(_this) {
        return function() {
          console.log('dealer gameover caught by handler');
          return _this.endgame();
        };
      })(this)));
      this.listenTo(this.get('playerHand'), 'gameover', ((function(_this) {
        return function() {
          console.log('player gameover caught by handler');
          return _this.endgame();
        };
      })(this)));
      console.log('\nnewgame called');
      return this.trigger('newgame', this);
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
